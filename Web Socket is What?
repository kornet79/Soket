---노션---
https://incredible-guan-388.notion.site/WebSocket-db31cea0fbe5480cabcfc7a4fb5c902f?pvs=4


# WEB Socket is What?

웹 소켓이 무었인지 먼저 알아 보기전에 간단하게 왜? 써줘야 하는지 알아야 하겠죠?

간단한 예시로 그룹 채팅이 예시로 있습니다.

실제로 그룹체팅을 만들때 어떠한 기술이 들어가는지 우리의 영원한 친구 GPT 에게 물어 봤습니다!

- 폴
- 롱폴
- 웹 소켓
- HTTPS 서버 푸시

등 여러가지 기술들이 사용되는데 여기서 웨 굳이 웹소켓을 사용해야 하나? 

당연히 가성비가 좋으니까~! 심지어 장점들이 많은데요?! 지금부터 알아보겠습니다. 

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/7e5b7679-605a-4b09-a167-e7a8bbfebe9c/Untitled.png)

우선 채팅이란 어떠하게 작동이 되는지부터 알아보 겠습니다.

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/7de72f78-0edc-4da3-956d-c0190d44242e/Untitled.png)

일단 user1 과 user2 의 통신을 하기 위해선 하나의 저장 공간이 필요합니다!

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/fa13eabd-e08f-4e7f-881c-40e54e1a0f0e/Untitled.png)

 user1 이 보낸 메시지를 user2에게 보내기 위해서 우리는 user1 메시지를 가지고 user2에게 보넬수가 있습니다. 근데 이 메시지가 언재 어떻게 얼마나 어디로 오는지 에 대한 방법이 중요합니다! 그래서 앞서 설명한 방법인 WebSocket 이라는 방법을 사용해서 구현해보도록 하겠습니다!

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/3e0aff78-5ae3-4991-9e5a-e1a0084ea5b4/Untitled.png)

근디 위에 4가지나 있는데 왜 설명 안해주냐고요?! 

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/012d6980-cd64-4972-9ae3-7652a5216d34/Untitled.png)

그..그래서 지금 할려고 합니다 무식한 지식이라 잘 설명할지는 모르겠지만요..

우선 폴 부터 설명하겠습니다.

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/6ca63656-3ebc-4ff9-a41f-b6a483d7f45b/Untitled.png)

### 폴!

쉽게 설명하자면 user1 이 메시지를 보네면 

“어? 님들 여기 메시지왔어요!!” 요런식으로 알려주고 없으면 걍 없다고 말해주는 정도에 통신 방식!

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/c677c153-c1b2-436e-8a97-cd885909813e/Untitled.png)

### 롱폴!

어? 뭔가 비슷한 방식이 또 나왔습니다. 이건 뭘까요?!

전반적인 방식은 폴과 비슷하지만 롱폴은 하나 다른점이 있습니다!!

만약 메시지가 없다면 “어? 왜 없지..잠만……흠…..” 게속 이케 대기를 타다가 만약 신호(메시지)가 오면 “어?! 찾았다!” 요런식으로 처음으로 온 요청을 잠시나마 기다리게 하지만 결과값을 가져올수 있다는 장점이 있다!

But 항상 실시간으로 돌리는것도 힘들고 요청을 결국 두번 돌려야한다는 단점 때문에 많이 사용하지 않는 않좋은 방법이라고도 한다.

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/81b3cad4-ddae-4ee1-b655-a910655007d6/Untitled.png)

### HTTP/2 서버 푸시~

일단 HTTP 2.0 버전을 사용해서 사용함!

원래는 1요청 1응답이 었는데 2.0 버전은

서버에서 그냥 전부다 보네줄수 있음

예시로 html 도 필요하고 CSS 도 필요하고 JS 도 필요한데 너무 귀차낭~

근데 이걸 한번에 처리하기 위해서 나온것이 HTTP/2 이다 그냥 요청하면 싹다 묶어서 보네줄수도 있는 댕쩌는 방법이다!

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/469872c7-ea83-474a-ac21-e10f6809f523/Untitled.png)

### SSE (Sever Sent Event)

이건 뭐냐~

클라이언트 : “우리 연결하까?”

서버 : “ㅇㅇ 연결 ㄱㄱ ”

이걸 게~~~속 유지 하면서 실시간으로 유지 하면서 게속 이벤트가 발생하면 보네주는 좋은 서비스이다.

한마디로 “동적 할당” 이 가능하다 이말이다

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/b301ec90-47b3-4b6c-b52b-da2f30dff68b/Untitled.png)

### Web Socket

대망에 WEB Socket 이 있는데 이거또한 SSE 와 형식은 얼뜻 비슷합니다.

월등히 상위개념이라고 보시면 쉽습니다. 물론 웹 소켓이 무조건 최고다!

가 아니라 적절하게 사용되고 다형성이 높게 사용할수있는 기술이 Web Socket 이라 많은 이점을 가지고 있다. 정도로만 알고 갑시다

아레에 실시간 그룹 통신에 필요한 개념들

## 데이터 통신 방식

### 스트리밍 통신

데이터 일부가 도착하는 대로 처리 / 실행

### 블록 / 메세지 통신

데이터가 블록 단위로

전송, 수신자가 완전히 받은 후에 처리시작!

## 연결 지향 방법

### Session-based-Connection

HTTP/2.0 랑 비슷하게 한번에 푸씨 해주는 방식

### Persistent Connection

SSE 와 웹 소켓이 이 방식에 속한다.

참고 영상

[WebSocket | 소켓 프로그래밍 | 그룹 채팅 구현 | 네트워크 과제](https://www.youtube.com/watch?v=cNX89t_Sv1s)
